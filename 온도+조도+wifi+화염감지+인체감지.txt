#include <SPI.h>
#include <WiFi.h>
#include "DHT11.h"


char ssid[] = "beat231";      //  연결하실 와이파이 SSID
char pass[] = "56300301";   // 네트워크 보안키
int keyIndex = 0;                 // your network key Index number (needed only for WEP)

int status = WL_IDLE_STATUS;

WiFiServer server(80);  // 80포트를 사용하는 웹서버 선언


#define DHT22_PIN    9   	//온도센서
#define LED  5			// 인체감지센서 LED
#define PIR  8			// 인체감지센서
int pirSensorValue = 0;

/*
 * DEBUG 값을 1로 하면, 측정한 습도와 온도 값을 시리얼 모니터에
 * 자세하게 출력합니다. 0로 놓으면 출력하지 않습니다. 
 */
#define DEBUG 0
#if DEBUG
DHT11 dht22(DHT22_PIN, (Stream *)&Serial);

#else
DHT11 dht22(DHT22_PIN);

#endif


void setup() {
  //Initialize serial and wait for port to open:
     // set PIR pin input mode 
   pinMode(PIR, INPUT); 
   // set LED pin output mode 
   pinMode(LED, OUTPUT); 
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) { // 현재 아두이노에 연결된 실드를 확인
    Serial.println("WiFi shield not present"); 
    while (true);  // 와이파이 실드가 아닐 경우 계속 대기
  }

  String fv = WiFi.firmwareVersion();
  if ( fv != "1.1.0" )
    Serial.println("Please upgrade the firmware");

    // 와이파이에 연결 시도
  while ( status != WL_CONNECTED) { //연결될 때까지 반복
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, pass);  // WPA/WPA2 연결
  }

  server.begin();

  printWifiStatus();  // 연결 성공시 연결된 네트워크 정보를 출력

}


void loop() {
  int ldrval = analogRead(A0);
  // 조도센서에서 값을 가져옴
  int fireSensorValue = analogRead(A2); // Its read a value. 
  
    // read PIR and if there is no PIR motion detected then turn off LED
   if(digitalRead(PIR) == LOW) { 
     digitalWrite(LED, LOW); 
   } 
   // if motion detected, then turn on LED
   else 
   { 
     digitalWrite(LED, HIGH); 
   } 
     pirSensorValue = digitalRead(PIR); //getting values from IR sensor
  


  WiFiClient client = server.available();  // 들어오는 클라이언트를 수신한다.
  if (client) {  // 클라이언트를 수신 시
    Serial.println("new client");  // 클라이언트 접속 확인 메시지 출력
    boolean currentLineIsBlank = true;

    while (client.connected ()) { 
      if (client.available()) {
        char c = client.read();
        // 문자의 끝을 입력 받으면 http 요청이 종료되고, 답신을 보낼 수 있습니다.






        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");  // the connection will be closed after completion of the response
          client.println("Refresh: 1");  // refresh the page automatically every 5 sec
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">");
          client.println("<html>");
          // output the value of each analog input pin
	  if(0 == dht22.readDHT11()) {
 
    word wH = dht22.getHumidity();
    word wT = dht22.getTemperature();
    
    float H = (wH & 0x7fff) / 10.0;
    float T = (wT & 0x7fff) / 10.0;
            client.print("습도    :    ");
	    Serial.print(H, 2); 
            Serial.print("% "); 
            client.print(H, 2);
            client.print("%");
            client.println("<br />");
            client.print("온도    :    "); wT & 0x8000 ? 
            Serial.print('-') : Serial.print('+'); Serial.print(T, 2); Serial.println('C');
            client.print(T, 2);
            client.print("C");
            client.println("<br />");
            client.print("조도    :    ");
            Serial.print(ldrval);
            client.println(ldrval);  // 조도 센서 값 출력
            client.print("조도");
            client.println("<br />");
            client.print("화염감지    :    ");
            Serial.println(fireSensorValue);
            client.print(fireSensorValue);
            client.println("<br />");
            client.print("인체감지    :    ");
            Serial.println(pirSensorValue);//output value to serial display
         client.print(pirSensorValue);
        }
          client.println("</html>");
          break;
        }
          if (c == '\n') { 
          currentLineIsBlank = true;
        }

        else if (c != '\r') {
          currentLineIsBlank = false;
        }
      }
    }
    delay(1000);
    client.stop();
    Serial.println("client disonnected");
    // 클라이언트와 연결을 끊는다.
  }
}

void printWifiStatus() {  // 연결된 네트워크 정보 출력
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());
  // 네트워크 SSID 출력

  IPAddress ip = WiFi.localIP(); 
  Serial.print("IP Address: ");
  Serial.println(ip);
  // 네트워크 ip 출력

  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
  // 수신 강도 출력
}